Hashing is a tool that ensures data integrity by taking binary data (the message) and producing a fixed-length representation called the hash value or message digest. 
The hash tool uses a cryptographic hashing function to verify and ensure data integrity. It can also verify authentication. Hash functions replace clear text password or encryption keys because hash functions are one-way functions. This means that if a password is hashed with a specific hashing algorithm, it will always result in the same hash digest. It is considered one-way because with hash functions, it is computationally infeasible for two different sets of data to come up with the same hash digest or output. Every time the data is changed or altered, the hash value also changes. Because of this, cryptographic hash values are often called digital fingerprints. These values guard against an accidental or intentional change to the data and accidental data corruption.
Hashing is a one-way mathematical function that is relatively easy to compute, but significantly harder to reverse. It has the following properties;
The input can be any length.
The output has a fixed length.
The hash function is one way and is not reversible.
Two different input values will almost never result in the same hash values.
Hashing Algorithm: Some Hash Algorithm includes;
Simple Hash Algorithm(8-bit Checksum): The 8-bit checksum is one of the first hashing algorithms, and it is the simplest form of a hash function. An 8-bit checksum calculates the hash by converting the message into binary numbers and then organizing the string of binary numbers into 8-bit chucks. The algorithm adds up the 8-bit values. The final step is to convert the result using a process called 2’s complement. The 2’s complement converts a binary to its opposite value, and then it adds one. This means that a zero converts to a one, and a one converts to a zero. The final step is to add 1 resulting in an 8-bit hash value.
Modern Hashing Algorithm: Two of the most popular modern hashing algorithm are Modern Digest 5(MD5) and Secure Hash Algorithm(SHA).
Message Digest 5 (MD5) Algorithm: MD5 is a one-way function that makes it easy to compute a hash from the given input data but makes it very difficult to compute input data given only a hash value. MD5 is a complex sequence of simple binary operations performed on input data to produce a 128-bit hashed message digest. Ron Rivest developed the MD5 hashing algorithm, and several Internet applications use it today.
Secure Hash Algorithm (SHA): SHA-2 algorithms are the secure hash algorithms that the U.S government requires by law for use in certain applications, and it includes use in other crptographic algorithms and protocols for the protection of sensitive unclassified information. The U.S National Institute of Standards and Technology(NIST) developed SHA.
SHA-2 is a stronger algorithm, and it is replacing MD5. SHA-256, SHA-384, and SHA-512 are the next-generation algorithms.
Integrity ensures that data and information is complete and unaltered at the time of its acquisition. The field of digital forensics uses hashing to verify all digital media that contain files. For example, the examiner creates a hash and a bit-for-bit copy of the media containing the files to produce a digital clone. The examiner compares the hash of the original media with the copy. If the two values match, the copies are identical. The fact that one set of bits is identical to the original set of bits establishes fixity. 
Fixity helps to answer several questions which are;
Does the examiner have the files he expects?
Is the data corrupted or changed?
Can the examiner prove that the files are not corrupt?
Now the forensics expert can examine the copy for any digital evidence while leaving the original intact and untouched.
Hashing algorithms turn any amount of data into a fixed-length fingerprint or digital hash. A criminal cannot reverse a digital hash to discover the original input. If the input changes at all, it results in a different hash.
We use cryptographic hash functions in the following situations:
To provide proof of authenticity when it is used with a symmetric secret authentication key, such as IP Security (IPsec) or routing protocol authentication
To provide authentication by generating one-time and one-way responses to challenges in authentication protocols
To provide message integrity check proof, such as those used in digitally signed contracts, and public key infrastructure (PKI) certificates, like those accepted when accessing a secure site using a browser
When choosing a hashing algorithm, use SHA-256 or higher as they are currently the most secure. Avoid SHA-1 and MD5 due to the discovery of security flaws. In production networks, implement SHA-256 or higher.
While hashing can detect accidental changes, it cannot guard against deliberate changes. There is no unique identifying information from the sender in the hashing procedure. This means that anyone can compute a hash for any data, as long as they have the correct hash function.  Therefore, hashing is vulnerable to man-in-the-middle attacks and does not provide security to transmitted data.
Cracking Hashes: To crack a hash, an attacker must guess the password. The top two attacks used to guess passwords are dictionary and brute-force attacks.
A dictionary attack uses a file containing common words, phrases, and passwords. The file has the hashes calculated. A dictionary attack compares the hashes in the file with the password hashes. If a hash matches, the attacker will know a group of potentially good passwords.
A brute-force attack attempts every possible combination of characters up to a given length. A brute-force attack takes a lot of processor time, but it is just a matter of time before this method discovers the password. Passwords need to be long enough to make the time it takes to execute a brute-force attack too long to be worthwhile. Hashing passwords makes it more difficult for the criminal to retrieve those passwords.
Salting makes password hashing more secure. If two users have the same password, they will also have the same password hashes. A salt, which is a random string of characters, is an additional input to the password before hashing.
Salting prevents an attacker from using a dictionary attack to try to guess passwords. Salting also makes it impossible to use lookup tables and rainbow tables to crack a hash.
Lookup Tables:A lookup table stores the pre-computed hashes of passwords in a password dictionary along with the corresponding password. A lookup table is a data structure that processes hundreds of hash lookups per second.
Reverse Lookup Tables: This attack allows the cybercriminal to launch a dictionary or brute-force attack on many hashes without the pre-computed lookup table. The cybercriminal creates a lookup table that plots each password hash from the breached account database to a list of users. The cybercriminal hashes each password guess and uses the lookup table to get a list of users whose password matched the cybercriminal’s guess, The attack works well because many users have the same password.
Rainbow Tables: Rainbow tables sacrifice hash-cracking speed to make the lookup tables smaller. A smaller table means that the table can store the solutions to more hashes in the same amount of space. 
Implementing Salting: A Cryptographically Secure Pseudo-Random Number Generator (CSPRNG) is the best choice to generate salt. CSPRNGs generate a random number that has a high level of randomness and is completely unpredictable, so it is cryptographically secure.
Use the following recommendations to implement Salting successfully;
The salt needs to be unique for every user password.
Never reuse a salt.
The length of the salt should match the length of the hash function’s output.
Always hash on the server in a web application.
Key stretching makes the hash function very slowly. This prevents high-end hardware that can compute billions of hashes per second less effective. Its also a technique that protect against attack.
How to store a salted password;
Use CSPRNG to generate a long random salt.
Add the salt to the beginning of the password
Hash it with SHA-256, a standard cryptographic hash function.
Save the salt and the hash as part of the user's database record.
How to validate a salted password:
Retrieve a user's salt and hash from the database.
Add the salt to the password and hash it with the same hash function.
Compare the hash of the given password to the one stored in the database.
If the hashes do not match, the password is incorrect.
Hash Message Authentication Code or Keyed-Hash Message Authentication Code(HMAC or KHMAC) use an additional secret key as input to the hash function.An HMAC uses a specific algorithm that combines a cryptographic hash function with a secret key, it goes a step further than just integrity assurance by adding authentication. Only parties who have access to that secret key can compute the digest of an HMAC function. This characteristic defeats man-in-the-middle attacks and provides authentication of the data origin.
Application of HMAC: HMACs can also authenticate a web user. Using HMAC, the user sends a private key identifier and an HMAC. The server looks up the user’s private key and creates an HMAC. The user’s HMAC must match the one calculated by the server.
VPNs using IPsec rely on HMAC functions to authenticate the origin of every packet and provide data integrity checking.
Cisco IOS routers use hashing with secret keys in an HMAC-like manner to add authentication information to routing protocol updates.
IPsec gateways and clients use hashing algorithms, such as MD5 and SHA-1 in HMAC mode, to provide packet integrity and authenticity.
Cisco software images on Cisco.com have an MD5-based checksum available so that customers can check the integrity of downloaded images.
Digital Signature: Handwritten signatures and stamped seals prove authorship of the contents of a document. Digital signatures can provide the same functionality as handwritten signatures. A digital signature is a mathematical method used to check the authenticity and integrity of a message, digital document, or software. There are an alternative to HMAC.
Digital signatures have specific properties that enable entity authentication and data integrity and they are;
Signature is Authentic: Signature is not forgeable and provides proof that the signer, and no one else signed the document.
Signature is Unalterable: After a document is signed, it cannot be altered.
Signature is Reusable: A signature is part of the document and cannot be moved to a different document.
Signature cannot be Repudiated: For legal purposes, the signature and the document are considered physical things. Signers cannot claim that they did not sign it.
NB: To repudiate means to deny. Non-repudiation is a way to ensure that the sender of a message or document cannot deny having sent the message or document and that the recipient cannot deny having received the message or document. A digital signature ensures that the sender electronically signed the message or document. Since a digital signature is unique to the individual creating it, that person cannot later deny that he or she provided the signature.
Processes of creating a Digital Signature: Asymmetric cryptography is the basis for digital signatures. A public key algorithm like RSA generates two keys: one private and the other public. The keys are mathematically related. 
Uses of Digital Signatures: Signing a hash instead of the whole document provides efficiency, compatibility, and integrity. Organizations may want to replace paper documents and ink signatures with a solution that assures the electronic document meets all legal requirements. Below are two situations that provide the use of digital signatures;
Code signing - Used to verify the integrity of executable files downloaded from a vendor website. Code signing also uses signed digital certificates to authenticate and verify the identity of the site.
Digital certificates - Used to verify the identity of an organization or individual to authenticate a vendor website and establish an encrypted connection to exchange confidential data. Standard for a public key infrastructure to manage digital certificates is x.509.
Comparing Digital Signatures: The three common digital signature algorithms are Digital Signature Algorithm (DSA), Rivest-Shamir-Adleman (RSA), and Elliptic Curve Digital Signature Algorithm (ECDSA). All three generate and verify digital signatures. These algorithms depend upon asymmetrical encryption and public key techniques. Digital signatures require two operations: Key generation and Key verification an they both require key encryption and decryption.
Digital Signature Algorithm(DSA): DSA uses large number factorization. Governments use DSA for signing to create digital signatures. DSA does not extend beyond the signature to the message itself.
Rivest Shamir Adleman(RSA): RSA is the most common public key cryptography algorithm in use today. RSA is named after the individuals who created it in 1977: Ron Rivest, Adi Shamir, and Leonard Adleman. RSA depends on asymmetrical encryption. RSA covers signing and also encrypts the content of the message.
Elliptic Curve Digital Signature Algorithm(ECDSA): ECDSA is the newest digital signature algorithm that is gradually replacing RSA. The advantage of this new algorithm is that it can uses much smaller key sizes for the same security and requires less computation than RSA.
DSA is faster than RSA as a signing services for a digital document. RSA is best suited for applications requiring the signing and verification of electronic documents and message encryption.
Like most areas of cryptography, the RSA algorithm is based on two mathematical principles; modulus and prime number factorization.
A digital certificate authenticates and verifies that users sending a message are who they claim to be. It is equivalent to an electronic passport and they enable users, hosts, and organizations to exchange information securely over the internet. It can also provide confidentiality for the receiver with the means to encrypt a reply.
A certificate authority (CA) functions the same as the licensing bureau. The CA issues digital certificates that authenticate the identity of organizations and users. These certificates also sign messages to ensure that no one tampered with the messages.
Things inside a Digital Certificate: Version number, Serial number, Certificate Algorithm Identifier, Issuer name, Validity Period, Subject name, Subject Public key Information, Issuer Unique Identifier, Subject Unique Identifier, Extensions, Certificate Authority Digital Signature.
Validation Process: Browsers and applications perform a validation check before they trust a certificate to ensure they are valid. The three processes include the following:
Certificate Discovery validates the certification path by checking each certificate starting at the beginning with the root CA’s certificate
Path Validation selects a certificate of the issuing CA for each certificate in the chain
Revocation determines whether the certificate was revoked and why
Certificate Path: An individual gets a certificate for a public key from a commercial CA. The certificate belongs to a chain of certificates called the chain of trust. The number of certificates in the chain depends on the hierarchical structure of the CA.
Data Integrity: Data integrity refers to the accuracy, consistency, and reliability of data stored in a database. The responsibility of data integrity falls on database designers, developers, and the organization’s management. The four data Integrity or constraints are;
Entity Integrity: All rows must have a unique identifier called a Primary Key.
Domain Integrity: All data stored in a column must follow the same format and definition.
Referential Integrity: Table relationships must remain consistent. Therefore, a user cannot delete a record which is related to another one
User-defined Integrity: A set of rules defined by a user which does not belong to one of the other categories.
Data Entry Controls: Data entry involves inputting data to a system. A set of controls ensures that users enter the correct data.
Set uo rules for basic checks includes;
Mandatory input ensures that a required field contains data
Input masks prevent users from entering invalid data or help ensure that they enter data consistently (like a phone number, for example)
Positive amounts
Data ranges ensure that a user enters data within a given range (like a date of birth entered as 01-18-1820, for example)
Mandatory second person approval
Maximum record modification trigger
Unusual activity trigger (a system locks when it recognizes unusual activity)
Validation Rules: A validation rule checks that data falls within the parameters defined by the database designer. A validation rule helps to ensure the completeness, accuracy and consistency of data. The criteria used in a validation rule include the following:
Size – checks the number of characters in a data item
Format – checks that the data conforms to a specified format
Consistency – checks for the consistency of codes in related data items
Range – checks that data lies within a minimum and maximum value
Check digit – provides for an extra calculation to generate a check digit for error detection.
Data Type Validation:Data type validation is the simplest data validation and verifies that a user entering data is consistent with the type of characters expected. For example, a phone number would not contain alpha characters. Databases allow three data types: integer, string, and decimal.
Input Validation: One of the most vulnerable aspects of database integrity management is controlling the data input process. Many well-known attacks run against a database and insert malformed data. The attack can confuse, crash, or make the application divulge too much information to the attacker. Attackers use automated input attacks.
Anomaly Detection : Anomaly detection refers to identifying patterns in data that do not conform to expected behavior. These non-conforming patterns are anomalies, outliers, exceptions, aberrations, or surprises in different database applications. Database anomaly detection can identify credit card and insurance fraud. Database anomaly detection can protect data from massive destruction or changes.
Anomaly Verification: Anomaly verification requires verification data requests or modifications when a system detects unusual or surprising patterns. An example of this is a credit card with two transactions in vastly different request locations in a short time.
Entity Integrity: Entity integrity is an integrity rule, which states that every table must have a primary key and that the column or columns chosen to be the primary key must be unique and not NULL. Null in a database signifies missing or unknown values. Entity integrity enables proper organization of data for that record.
Referential Integrity: Referential integrity maintains the integrity of foreign keys. A foreign key in one table references a primary key in a second table. 
Domain Integrity: Domain integrity ensures that all the data items in a column fall within a defined set of valid values. Each column in a table has a defined set of values, such as the set of all numbers for credit card numbers, social security numbers, or email addresses. Limiting the value assigned to an instance of that column (an attribute) enforces domain integrity. Domain integrity enforcement can be as simple as choosing the correct data type, length and or format for a column.